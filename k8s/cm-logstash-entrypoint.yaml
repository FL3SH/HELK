apiVersion: v1
data:
  logstash-entrypoint.sh: "#!/bin/bash\n\n# HELK script: logstash-entrypoint.sh\n#
    HELK script description: Pushes output templates to ES and starts Logstash\n#
    HELK build Stage: Alpha\n# Author: Roberto Rodriguez (@Cyb3rWard0g)\n# License:
    GPL-3.0\n\n# *********** Environment Variables ***************\nDIR=/usr/share/logstash/helk/docker/helk-logstash/output_templates\n\nif
    [[ -z \"$ELASTICSEARCH_URL\" ]]; then\n    export ELASTICSEARCH_URL=\"http://helk-elasticsearch:9200\"\nfi\necho
    \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Setting Elasticsearch URL to $ELASTICSEARCH_URL\"\n\n#
    ******** Set Trial License Variables ***************\nif [[ -n \"$ELASTIC_PASSWORD\"
    ]]; then\n  if [[ -z \"$ELASTIC_USERNAME\" ]]; then\n    ELASTIC_USERNAME=elastic\n
    \ fi\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Elasticsearch's
    username to access Elasticsearch to $ELASTIC_USERNAME\"\n\n  if [[ -z \"$ELASTIC_HOST\"
    ]]; then\n    ELASTIC_HOST=helk-elasticsearch\n  fi\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO]
    Setting Elasticsearch host name to $ELASTIC_HOST\"\n\n  if [[ -z \"$ELASTIC_PORT\"
    ]]; then\n    ELASTIC_PORT=9200\n  fi\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO]
    Setting Elasticsearch port to $ELASTIC_PORT\"\n\n  # ****** Updating Pipeline
    configs ***********\n  for config in /usr/share/logstash/helk/docker/helk-logstash/pipeline/*-output.conf\n
    \ do\n      echo \"[HELK-LOGSTASH-INSTALLATION-INFO] Updating pipeline config
    $config...\"\n      sed -i \"s/#password \\=>.*$/password \\=> \\'${ELASTIC_PASSWORD}\\'/g\"
    ${config}\n  done\n\n  # *********** Check if Elasticsearch is up ***************\n
    \ echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI
    to be accessible..\"\n  until curl -s -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD $ELASTICSEARCH_URL
    -o /dev/null; do\n    sleep 1\n  done\n\nelse\n  # *********** Check if Elasticsearch
    is up ***************\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Waiting
    for elasticsearch URI to be accessible..\"\n  until curl -s $ELASTICSEARCH_URL
    -o /dev/null; do\n      sleep 1\n  done\n\nfi\n\n# ********** Uploading templates
    to Elasticsearch *******\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Uploading
    templates to elasticsearch..\"\nfor file in ${DIR}/*.json; do\n    template_name=$(echo
    $file | sed -r ' s/^.*\\/[0-9]+\\-//')\n    while true; do\n      echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO]
    Uploading $template_name template to elasticsearch..\"\n      if [[ -n \"$ELASTIC_PASSWORD\"
    ]]; then\n        STATUS=$(curl -s -o /dev/null -w '%{http_code}' -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD
    $ELASTICSEARCH_URL)\n        if [ $STATUS -eq 200 ]; then\n          curl -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD
    -X POST $ELASTICSEARCH_URL/_template/$template_name -H 'Content-Type: application/json'
    -d@${file}\n          break\n        else\n          sleep 1\n        fi\n      else\n
    \       STATUS=$(curl -s -o /dev/null -w '%{http_code}' $ELASTICSEARCH_URL)\n
    \       if [ $STATUS -eq 200 ]; then\n          curl -X POST $ELASTICSEARCH_URL/_template/$template_name
    -H 'Content-Type: application/json' -d@${file}\n          break\n        else\n
    \         sleep 1\n        fi\n      fi\n    done\ndone\n\n# ********** Install
    Plugins *****************\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Checking
    Logstash plugins..\"\n# Test a few to determine if probably all already installed\nif
    ( logstash-plugin list 'prune' ) && ( logstash-plugin list 'i18n' ) && ( logstash-plugin
    list 'wmi' ); then\n    echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Plugins
    are already installed\"\nelse\n# logstash-plugin install logstash-filter-dns &&
    logstash-plugin install logstash-filter-cidr && logstash-plugin install logstash-input-lumberjack
    && logstash-plugin install logstash-output-lumberjack && logstash-plugin install
    logstash-output-zabbix && logstash-plugin install logstash-filter-geoip && logstash-plugin
    install logstash-codec-cef && logstash-plugin install logstash-output-syslog &&
    logstash-plugin update logstash-filter-dissect && logstash-plugin install logstash-output-kafka
    && logstash-plugin install logstash-input-kafka && logstash-plugin install logstash-filter-translate
    && logstash-plugin install logstash-filter-alter && logstash-plugin install logstash-filter-fingerprint
    && logstash-plugin install logstash-output-stdout && logstash-plugin install logstash-filter-prune
    && logstash-plugin install logstash-codec-gzip_lines && logstash-plugin install
    logstash-codec-avro && logstash-plugin install logstash-codec-netflow && logstash-plugin
    install logstash-filter-i18n && logstash-plugin install logstash-filter-environment
    && logstash-plugin install logstash-filter-de_dot && logstash-plugin install logstash-input-snmptrap
    && logstash-plugin install logstash-input-snmp && logstash-plugin install logstash-input-jdbc
    && logstash-plugin install logstash-input-wmi && logstash-plugin install logstash-filter-clone\n\tif
    (logstash-plugin install file:///usr/share/logstash/helk/docker/helk-logstash/plugins/logstash-offline-plugins-6.6.1.zip);
    then\n    echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Logstash plugins installed
    via offline package..\"\n  else\n    echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO]
    Trying to install logstash plugins over the Internet..\"\n    logstash-plugin
    install logstash-filter-translate && logstash-plugin install logstash-filter-dns
    && logstash-plugin install logstash-filter-cidr && logstash-plugin install logstash-filter-geoip
    && logstash-plugin update logstash-filter-dissect && logstash-plugin install logstash-output-kafka
    && logstash-plugin install logstash-input-kafka && logstash-plugin install logstash-filter-alter
    && logstash-plugin install logstash-filter-fingerprint && logstash-plugin install
    logstash-filter-prune && logstash-plugin install logstash-codec-gzip_lines &&
    logstash-plugin install logstash-codec-netflow && logstash-plugin install logstash-filter-i18n
    && logstash-plugin install logstash-filter-environment && logstash-plugin install
    logstash-filter-de_dot && logstash-plugin install logstash-input-wmi && logstash-plugin
    install logstash-filter-clone\n  fi\nfi\n\n# ********* Setting LS_JAVA_OPTS ***************\nif
    [[ -z \"$LS_JAVA_OPTS\" ]]; then\n  while true; do\n    # Check using more accurate
    MB\n    AVAILABLE_MEMORY=$(awk '/MemAvailable/{printf \"%.f\", $2/1024}' /proc/meminfo)\n
    \   if [ $AVAILABLE_MEMORY -ge 900 -a $AVAILABLE_MEMORY -le 1000 ]; then\n      LS_MEMORY=400\n
    \     LS_MEMORY_HIGH=1000\n      export LS_JAVA_OPTS=\"-Xms${LS_MEMORY}m -Xmx${LS_MEMORY_HIGH}m\"\n
    \     break\n    elif [ $AVAILABLE_MEMORY -ge 1001 -a $AVAILABLE_MEMORY -le 3000
    ]; then\n      LS_MEMORY=700\n      LS_MEMORY_HIGH=1300\n      export LS_JAVA_OPTS=\"-Xms${LS_MEMORY}m
    -Xmx${LS_MEMORY_HIGH}m\"\n      break\n    elif [ $AVAILABLE_MEMORY -gt 3000 ];
    then\n      # Set high & low, so logstash doesn't use everything unnecessarily,
    it will usually flux up and down in usage -- and doesn't \"severely\" despite
    what everyone seems to believe\n      LS_MEMORY=$(( AVAILABLE_MEMORY / 4 ))\n
    \     LS_MEMORY_HIGH=$(( AVAILABLE_MEMORY / 2 ))\n      if [ $AVAILABLE_MEMORY
    -gt 31000 ]; then\n        LS_MEMORY=8000\n        LS_MEMORY_HIGH=31000\n      fi\n
    \     export LS_JAVA_OPTS=\"-Xms${LS_MEMORY}m -Xmx${LS_MEMORY_HIGH}m\"\n      break\n
    \   else\n      echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] $LS_MEMORY MB
    is not enough memory for Logstash yet..\"\n      sleep 1\n    fi\n  done\nfi\necho
    \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Setting LS_JAVA_OPTS to $LS_JAVA_OPTS\"\n\n#
    ********** Starting Logstash *****************\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO]
    Running docker-entrypoint script..\"\nbash /usr/local/bin/docker-entrypoint\n"
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"logstash-entrypoint.sh":"#!/bin/bash\n\n# HELK script: logstash-entrypoint.sh\n# HELK script description: Pushes output templates to ES and starts Logstash\n# HELK build Stage: Alpha\n# Author: Roberto Rodriguez (@Cyb3rWard0g)\n# License: GPL-3.0\n\n# *********** Environment Variables ***************\nDIR=/usr/share/logstash/helk/docker/helk-logstash/output_templates\n\nif [[ -z \"$ELASTICSEARCH_URL\" ]]; then\n    export ELASTICSEARCH_URL=\"http://helk-elasticsearch:9200\"\nfi\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Setting Elasticsearch URL to $ELASTICSEARCH_URL\"\n\n# ******** Set Trial License Variables ***************\nif [[ -n \"$ELASTIC_PASSWORD\" ]]; then\n  if [[ -z \"$ELASTIC_USERNAME\" ]]; then\n    ELASTIC_USERNAME=elastic\n  fi\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Elasticsearch's username to access Elasticsearch to $ELASTIC_USERNAME\"\n\n  if [[ -z \"$ELASTIC_HOST\" ]]; then\n    ELASTIC_HOST=helk-elasticsearch\n  fi\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Setting Elasticsearch host name to $ELASTIC_HOST\"\n\n  if [[ -z \"$ELASTIC_PORT\" ]]; then\n    ELASTIC_PORT=9200\n  fi\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Setting Elasticsearch port to $ELASTIC_PORT\"\n\n  # ****** Updating Pipeline configs ***********\n  for config in /usr/share/logstash/helk/docker/helk-logstash/pipeline/*-output.conf\n  do\n      echo \"[HELK-LOGSTASH-INSTALLATION-INFO] Updating pipeline config $config...\"\n      sed -i \"s/#password \\=\u003e.*$/password \\=\u003e \\'${ELASTIC_PASSWORD}\\'/g\" ${config}\n  done\n\n  # *********** Check if Elasticsearch is up ***************\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI to be accessible..\"\n  until curl -s -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD $ELASTICSEARCH_URL -o /dev/null; do\n    sleep 1\n  done\n\nelse\n  # *********** Check if Elasticsearch is up ***************\n  echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI to be accessible..\"\n  until curl -s $ELASTICSEARCH_URL -o /dev/null; do\n      sleep 1\n  done\n\nfi\n\n# ********** Uploading templates to Elasticsearch *******\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Uploading templates to elasticsearch..\"\nfor file in ${DIR}/*.json; do\n    template_name=$(echo $file | sed -r ' s/^.*\\/[0-9]+\\-//')\n    while true; do\n      echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Uploading $template_name template to elasticsearch..\"\n      if [[ -n \"$ELASTIC_PASSWORD\" ]]; then\n        STATUS=$(curl -s -o /dev/null -w '%{http_code}' -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD $ELASTICSEARCH_URL)\n        if [ $STATUS -eq 200 ]; then\n          curl -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD -X POST $ELASTICSEARCH_URL/_template/$template_name -H 'Content-Type: application/json' -d@${file}\n          break\n        else\n          sleep 1\n        fi\n      else\n        STATUS=$(curl -s -o /dev/null -w '%{http_code}' $ELASTICSEARCH_URL)\n        if [ $STATUS -eq 200 ]; then\n          curl -X POST $ELASTICSEARCH_URL/_template/$template_name -H 'Content-Type: application/json' -d@${file}\n          break\n        else\n          sleep 1\n        fi\n      fi\n    done\ndone\n\n# ********** Install Plugins *****************\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Checking Logstash plugins..\"\n# Test a few to determine if probably all already installed\nif ( logstash-plugin list 'prune' ) \u0026\u0026 ( logstash-plugin list 'i18n' ) \u0026\u0026 ( logstash-plugin list 'wmi' ); then\n    echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Plugins are already installed\"\nelse\n# logstash-plugin install logstash-filter-dns \u0026\u0026 logstash-plugin install logstash-filter-cidr \u0026\u0026 logstash-plugin install logstash-input-lumberjack \u0026\u0026 logstash-plugin install logstash-output-lumberjack \u0026\u0026 logstash-plugin install logstash-output-zabbix \u0026\u0026 logstash-plugin install logstash-filter-geoip \u0026\u0026 logstash-plugin install logstash-codec-cef \u0026\u0026 logstash-plugin install logstash-output-syslog \u0026\u0026 logstash-plugin update logstash-filter-dissect \u0026\u0026 logstash-plugin install logstash-output-kafka \u0026\u0026 logstash-plugin install logstash-input-kafka \u0026\u0026 logstash-plugin install logstash-filter-translate \u0026\u0026 logstash-plugin install logstash-filter-alter \u0026\u0026 logstash-plugin install logstash-filter-fingerprint \u0026\u0026 logstash-plugin install logstash-output-stdout \u0026\u0026 logstash-plugin install logstash-filter-prune \u0026\u0026 logstash-plugin install logstash-codec-gzip_lines \u0026\u0026 logstash-plugin install logstash-codec-avro \u0026\u0026 logstash-plugin install logstash-codec-netflow \u0026\u0026 logstash-plugin install logstash-filter-i18n \u0026\u0026 logstash-plugin install logstash-filter-environment \u0026\u0026 logstash-plugin install logstash-filter-de_dot \u0026\u0026 logstash-plugin install logstash-input-snmptrap \u0026\u0026 logstash-plugin install logstash-input-snmp \u0026\u0026 logstash-plugin install logstash-input-jdbc \u0026\u0026 logstash-plugin install logstash-input-wmi \u0026\u0026 logstash-plugin install logstash-filter-clone\n\tif (logstash-plugin install file:///usr/share/logstash/helk/docker/helk-logstash/plugins/logstash-offline-plugins-6.6.1.zip); then\n    echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Logstash plugins installed via offline package..\"\n  else\n    echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Trying to install logstash plugins over the Internet..\"\n    logstash-plugin install logstash-filter-translate \u0026\u0026 logstash-plugin install logstash-filter-dns \u0026\u0026 logstash-plugin install logstash-filter-cidr \u0026\u0026 logstash-plugin install logstash-filter-geoip \u0026\u0026 logstash-plugin update logstash-filter-dissect \u0026\u0026 logstash-plugin install logstash-output-kafka \u0026\u0026 logstash-plugin install logstash-input-kafka \u0026\u0026 logstash-plugin install logstash-filter-alter \u0026\u0026 logstash-plugin install logstash-filter-fingerprint \u0026\u0026 logstash-plugin install logstash-filter-prune \u0026\u0026 logstash-plugin install logstash-codec-gzip_lines \u0026\u0026 logstash-plugin install logstash-codec-netflow \u0026\u0026 logstash-plugin install logstash-filter-i18n \u0026\u0026 logstash-plugin install logstash-filter-environment \u0026\u0026 logstash-plugin install logstash-filter-de_dot \u0026\u0026 logstash-plugin install logstash-input-wmi \u0026\u0026 logstash-plugin install logstash-filter-clone\n  fi\nfi\n\n# ********* Setting LS_JAVA_OPTS ***************\nif [[ -z \"$LS_JAVA_OPTS\" ]]; then\n  while true; do\n    # Check using more accurate MB\n    AVAILABLE_MEMORY=$(awk '/MemAvailable/{printf \"%.f\", $2/1024}' /proc/meminfo)\n    if [ $AVAILABLE_MEMORY -ge 900 -a $AVAILABLE_MEMORY -le 1000 ]; then\n      LS_MEMORY=400\n      LS_MEMORY_HIGH=1000\n      export LS_JAVA_OPTS=\"-Xms${LS_MEMORY}m -Xmx${LS_MEMORY_HIGH}m\"\n      break\n    elif [ $AVAILABLE_MEMORY -ge 1001 -a $AVAILABLE_MEMORY -le 3000 ]; then\n      LS_MEMORY=700\n      LS_MEMORY_HIGH=1300\n      export LS_JAVA_OPTS=\"-Xms${LS_MEMORY}m -Xmx${LS_MEMORY_HIGH}m\"\n      break\n    elif [ $AVAILABLE_MEMORY -gt 3000 ]; then\n      # Set high \u0026 low, so logstash doesn't use everything unnecessarily, it will usually flux up and down in usage -- and doesn't \"severely\" despite what everyone seems to believe\n      LS_MEMORY=$(( AVAILABLE_MEMORY / 4 ))\n      LS_MEMORY_HIGH=$(( AVAILABLE_MEMORY / 2 ))\n      if [ $AVAILABLE_MEMORY -gt 31000 ]; then\n        LS_MEMORY=8000\n        LS_MEMORY_HIGH=31000\n      fi\n      export LS_JAVA_OPTS=\"-Xms${LS_MEMORY}m -Xmx${LS_MEMORY_HIGH}m\"\n      break\n    else\n      echo \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] $LS_MEMORY MB is not enough memory for Logstash yet..\"\n      sleep 1\n    fi\n  done\nfi\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Setting LS_JAVA_OPTS to $LS_JAVA_OPTS\"\n\n# ********** Starting Logstash *****************\necho \"[HELK-LOGSTASH-DOCKER-INSTALLATION-INFO] Running docker-entrypoint script..\"\nbash /usr/local/bin/docker-entrypoint\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"logstash-entrypoint","namespace":"helk"}}
  creationTimestamp: null
  name: logstash-entrypoint
