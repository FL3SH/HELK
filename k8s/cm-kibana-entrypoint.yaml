apiVersion: v1
data:
  kibana-entrypoint.sh: |
    #!/bin/sh
    set -x

    # HELK script: kibana-entrypoint.sh
    # HELK script description: Starts Kibana service
    # HELK build Stage: Alpha
    # Author: Roberto Rodriguez (@Cyb3rWard0g)
    # License: GPL-3.0

    # *********** Install Plugins *********************

    # *********** Environment Variables ***************
    if [[ -z "$ELASTICSEARCH_URL" ]]; then
      export ELASTICSEARCH_URL=http://helk-elasticsearch:9200
    fi
    echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Elasticsearch URL to $ELASTICSEARCH_URL"

    if [[ -z "$SERVER_HOST" ]]; then
      export SERVER_HOST=0.0.0.0
    fi
    echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana server host to $SERVER_HOST"

    if [[ -z "$SERVER_PORT" ]]; then
      export SERVER_PORT=5601
    fi
    echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana server port to $SERVER_PORT"

    # ******** Set Trial License Variables ***************
    if [[ -n "$ELASTICSEARCH_PASSWORD" ]]; then
      if [[ -z "$ELASTICSEARCH_USERNAME" ]]; then
        export ELASTICSEARCH_USERNAME=elastic
      fi
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Elasticsearch's username to access Elasticsearch to $ELASTICSEARCH_USERNAME"

      if [[ -z "$KIBANA_USER" ]]; then
        export KIBANA_USER=kibana
      fi
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana's username to access Elasticsearch to $KIBANA_USER"

      if [[ -z "$KIBANA_PASSWORD" ]]; then
        export KIBANA_PASSWORD=kibanapassword
      fi
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana's password to access Elasticsearch to $KIBANA_PASSWORD"

      if [[ -z "$KIBANA_UI_PASSWORD" ]]; then
        export KIBANA_UI_PASSWORD=hunting
      fi
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana's UI password to $KIBANA_UI_PASSWORD"

      # *********** Check if Elasticsearch is up ***************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI to be accessible.."
      until curl -s -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD $ELASTICSEARCH_URL -o /dev/null; do
        sleep 1
      done

      # *********** Change Kibana and Logstash password ***************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Submitting a request to change the password of a Kibana and Logstash users .."
      until curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -H 'Content-Type:application/json' -XPUT $ELASTICSEARCH_URL/_xpack/security/user/kibana/_password -d "{\"password\": \"$KIBANA_PASSWORD\"}"
      do
        sleep 1
      done

      until curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -H 'Content-Type:application/json' -XPUT $ELASTICSEARCH_URL/_xpack/security/user/logstash_system/_password -d "{\"password\": \"logstashpassword\"}"
      do
        sleep 1
      done

    else
      # *********** Check if Elasticsearch is up ***************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI to be accessible.."
      until curl -s $ELASTICSEARCH_URL -o /dev/null; do
        sleep 1
      done
    fi

    echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Starting Kibana service.."
    exec /usr/local/bin/kibana-docker &

    # *********** Creating Kibana Dashboards, visualizations and index-patterns ***************
    echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Running helk_kibana_setup.sh script..."
    bash /usr/share/kibana/scripts/kibana-setup.sh

    tail -f /usr/share/kibana/logs/kibana_logs.log
  kibana-setup.sh: |
    #!/bin/bash
    set -x

    # HELK script: kibana-setup.sh
    # HELK script description: Creates Kibana index patterns, dashboards and visualizations automatically.
    # HELK build Stage: Alpha
    # Author: Roberto Rodriguez (@Cyb3rWard0g)
    # License: GPL-3.0

    # References:
    # https://github.com/elastic/kibana/issues/3709 (https://github.com/hobti01)
    # https://explainshell.com/explain?cmd=set+-euxo%20pipefail
    # https://github.com/elastic/beats-dashboards/blob/master/load.sh
    # https://github.com/elastic/kibana/issues/14872
    # https://github.com/elastic/stack-docker/blob/master/docker-compose.yml
    # https://stackoverflow.com/a/42377880

    # *********** Setting Variables ***************
    KIBANA_URL=http://localhost:5601 #fix with sts
    TIME_FIELD="@timestamp"
    DEFAULT_INDEX="logs-endpoint-winevent-sysmon-*"
    DIR=/usr/share/kibana/dashboards

    # *********** Waiting for Kibana port to be up ***************
    echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Checking to see if kibana port is up..."
    until curl -s $KIBANA_URL -o /dev/null; do
        sleep 1
    done

    # *********** Waiting for Kibana server to be running ***************
    until $(curl --output /dev/null --silent --head --fail "$KIBANA_URL"); do
      echo "waitinng for kibana server.."
      sleep 1
    done

    # ******** Set Trial License Variables ***************
    if [[ -n "$ELASTICSEARCH_PASSWORD" ]] && [[ -n "$ELASTICSEARCH_USERNAME" ]]; then
      # *********** Creating Kibana index-patterns ***************
      declare -a index_patterns=("logs-endpoint-*" "logs-*" "logs-endpoint-winevent-sysmon-*" "logs-endpoint-winevent-security-*" "logs-endpoint-winevent-system-*" "logs-endpoint-winevent-application-*" "logs-endpoint-winevent-wmiactivity-*" "logs-endpoint-winevent-powershell-*" "mitre-attack-*" "elastalert_status" "elastalert_status_status" "elastalert_status_error" "elastalert_status_silence" "elastalert_status_past" "sysmon-join-*")
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Creating Kibana Index Patterns..."
      for index in ${!index_patterns[@]}; do
          echo "[++++++] creating kibana index ${index_patterns[${index}]}"
          until curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST "$KIBANA_URL/api/saved_objects/index-pattern/${index_patterns[${index}]}" \
          -H "Content-Type: application/json" -H "kbn-xsrf: true" \
          -d"{\"attributes\":{\"title\":\"${index_patterns[${index}]}\",\"timeFieldName\":\"$TIME_FIELD\"}}"
          do
            sleep 1
          done
      done

      # *********** Making Sysmon the default index ***************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Making Sysmon the default index..."
      until curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST -H "Content-Type: application/json" -H "kbn-xsrf: true" \
      "$KIBANA_URL/api/kibana/settings/defaultIndex" \
      -d"{\"value\":\"$DEFAULT_INDEX\"}"
      do
        sleep 1
      done

      # *********** Set URL session store *********************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting URL session store"
      curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST "$KIBANA_URL/api/kibana/settings" -H 'Content-Type: application/json' -H 'kbn-xsrf: true' -d"
      {
        \"changes\":{
            \"state:storeInSessionStorage\": true
          }
      }
      "

      # *********** Loading dashboards ***************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Loading Dashboards..."
      for file in ${DIR}/*.json
      do
          echo "[++++++] Loading dashboard file ${file}"
          until curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST "$KIBANA_URL/api/kibana/dashboards/import" -H 'kbn-xsrf: true' \
          -H 'Content-type:application/json' -d @${file}
          do
            sleep 1
          done
      done

      # *********** Creating HELK User *********************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting HELK's user password to $KIBANA_UI_PASSWORD"
      curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_URL/_xpack/security/user/helk" -H 'Content-Type: application/json' -d"
      {
        \"password\" : \"$KIBANA_UI_PASSWORD\",
        \"roles\" : [ \"superuser\" ],
        \"full_name\" : \"The HELK\",
        \"email\" : \"helk@example.com\"
      }
      "

      # *********** Create Roles *******************
      curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_URL/_xpack/security/role/hunters" -H 'Content-Type: application/json' -d'
      {
        "run_as": [],
        "cluster": [],
        "indices": [
          {
            "names": [ "logs-*" ],
            "privileges": [ "read" ]
          }
        ]
      }
      '
      curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_URL/_xpack/security/role/sysmon_hunters" -H 'Content-Type: application/json' -d'
      {
        "run_as": [],
        "cluster": [],
        "indices": [
          {
            "names": [ "logs-endpoint-winevent-sysmon-*" ],
            "privileges": [ "read" ]
          }
        ]
      }
      '
    else
      # *********** Creating Kibana index-patterns ***************
      declare -a index_patterns=("logs-endpoint-*" "logs-*" "logs-endpoint-winevent-sysmon-*" "logs-endpoint-winevent-security-*" "logs-endpoint-winevent-system-*" "logs-endpoint-winevent-application-*" "logs-endpoint-winevent-wmiactivity-*" "logs-endpoint-winevent-powershell-*" "mitre-attack-*" "elastalert_status" "elastalert_status_status" "elastalert_status_error" "elastalert_status_silence" "elastalert_status_past" "sysmon-join-*")

      echo "[+++] Creating Kibana Index Patterns..."
      for index in ${!index_patterns[@]}; do
          echo "[++++++] creating kibana index ${index_patterns[${index}]}"
          until curl -X POST "$KIBANA_URL/api/saved_objects/index-pattern/${index_patterns[${index}]}" \
          -H "Content-Type: application/json" -H "kbn-xsrf: true" \
          -d"{\"attributes\":{\"title\":\"${index_patterns[${index}]}\",\"timeFieldName\":\"$TIME_FIELD\"}}"
          do
              sleep 1
          done
      done

      # *********** Set URL session store *********************
      echo "[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting URL session store"
      curl -X POST "$KIBANA_URL/api/kibana/settings" -H 'Content-Type: application/json' -H 'kbn-xsrf: true' -d"
      {
        \"changes\":{
            \"state:storeInSessionStorage\": true
          }
      }
      "

      # *********** Making Sysmon the default index ***************
      echo "[++] Making Sysmon the default index..."
      until curl -X POST -H "Content-Type: application/json" -H "kbn-xsrf: true" \
      "$KIBANA_URL/api/kibana/settings/defaultIndex" \
      -d"{\"value\":\"$DEFAULT_INDEX\"}"
      do
          sleep 1
      done

      # *********** Loading dashboards ***************
      echo "[+++] Loading Dashboards..."
      for file in ${DIR}/*.json
      do
          echo "[++++++] Loading dashboard file ${file}"
          until curl -X POST "$KIBANA_URL/api/kibana/dashboards/import" -H 'kbn-xsrf: true' \
          -H 'Content-type:application/json' -d @${file}
          do
              sleep 1
          done
      done
    fi
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"kibana-entrypoint.sh":"#!/bin/sh\nset -x\n\n# HELK script: kibana-entrypoint.sh\n# HELK script description: Starts Kibana service\n# HELK build Stage: Alpha\n# Author: Roberto Rodriguez (@Cyb3rWard0g)\n# License: GPL-3.0\n\n# *********** Install Plugins *********************\n\n# *********** Environment Variables ***************\nif [[ -z \"$ELASTICSEARCH_URL\" ]]; then\n  export ELASTICSEARCH_URL=http://helk-elasticsearch:9200\nfi\necho \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Elasticsearch URL to $ELASTICSEARCH_URL\"\n\nif [[ -z \"$SERVER_HOST\" ]]; then\n  export SERVER_HOST=0.0.0.0\nfi\necho \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana server host to $SERVER_HOST\"\n\nif [[ -z \"$SERVER_PORT\" ]]; then\n  export SERVER_PORT=5601\nfi\necho \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana server port to $SERVER_PORT\"\n\n# ******** Set Trial License Variables ***************\nif [[ -n \"$ELASTICSEARCH_PASSWORD\" ]]; then\n  if [[ -z \"$ELASTICSEARCH_USERNAME\" ]]; then\n    export ELASTICSEARCH_USERNAME=elastic\n  fi\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Elasticsearch's username to access Elasticsearch to $ELASTICSEARCH_USERNAME\"\n\n  if [[ -z \"$KIBANA_USER\" ]]; then\n    export KIBANA_USER=kibana\n  fi\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana's username to access Elasticsearch to $KIBANA_USER\"\n\n  if [[ -z \"$KIBANA_PASSWORD\" ]]; then\n    export KIBANA_PASSWORD=kibanapassword\n  fi\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana's password to access Elasticsearch to $KIBANA_PASSWORD\"\n\n  if [[ -z \"$KIBANA_UI_PASSWORD\" ]]; then\n    export KIBANA_UI_PASSWORD=hunting\n  fi\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting Kibana's UI password to $KIBANA_UI_PASSWORD\"\n\n  # *********** Check if Elasticsearch is up ***************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI to be accessible..\"\n  until curl -s -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD $ELASTICSEARCH_URL -o /dev/null; do\n    sleep 1\n  done\n\n  # *********** Change Kibana and Logstash password ***************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Submitting a request to change the password of a Kibana and Logstash users ..\"\n  until curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -H 'Content-Type:application/json' -XPUT $ELASTICSEARCH_URL/_xpack/security/user/kibana/_password -d \"{\\\"password\\\": \\\"$KIBANA_PASSWORD\\\"}\"\n  do\n    sleep 1\n  done\n\n  until curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -H 'Content-Type:application/json' -XPUT $ELASTICSEARCH_URL/_xpack/security/user/logstash_system/_password -d \"{\\\"password\\\": \\\"logstashpassword\\\"}\"\n  do\n    sleep 1\n  done\n\nelse\n  # *********** Check if Elasticsearch is up ***************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Waiting for elasticsearch URI to be accessible..\"\n  until curl -s $ELASTICSEARCH_URL -o /dev/null; do\n    sleep 1\n  done\nfi\n\necho \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Starting Kibana service..\"\nexec /usr/local/bin/kibana-docker \u0026\n\n# *********** Creating Kibana Dashboards, visualizations and index-patterns ***************\necho \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Running helk_kibana_setup.sh script...\"\nbash /usr/share/kibana/scripts/kibana-setup.sh\n\ntail -f /usr/share/kibana/logs/kibana_logs.log\n","kibana-setup.sh":"#!/bin/bash\nset -x\n\n# HELK script: kibana-setup.sh\n# HELK script description: Creates Kibana index patterns, dashboards and visualizations automatically.\n# HELK build Stage: Alpha\n# Author: Roberto Rodriguez (@Cyb3rWard0g)\n# License: GPL-3.0\n\n# References:\n# https://github.com/elastic/kibana/issues/3709 (https://github.com/hobti01)\n# https://explainshell.com/explain?cmd=set+-euxo%20pipefail\n# https://github.com/elastic/beats-dashboards/blob/master/load.sh\n# https://github.com/elastic/kibana/issues/14872\n# https://github.com/elastic/stack-docker/blob/master/docker-compose.yml\n# https://stackoverflow.com/a/42377880\n\n# *********** Setting Variables ***************\nKIBANA_URL=http://localhost:5601 #fix with sts\nTIME_FIELD=\"@timestamp\"\nDEFAULT_INDEX=\"logs-endpoint-winevent-sysmon-*\"\nDIR=/usr/share/kibana/dashboards\n\n# *********** Waiting for Kibana port to be up ***************\necho \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Checking to see if kibana port is up...\"\nuntil curl -s $KIBANA_URL -o /dev/null; do\n    sleep 1\ndone\n\n# *********** Waiting for Kibana server to be running ***************\nuntil $(curl --output /dev/null --silent --head --fail \"$KIBANA_URL\"); do\n  echo \"waitinng for kibana server..\"\n  sleep 1\ndone\n\n# ******** Set Trial License Variables ***************\nif [[ -n \"$ELASTICSEARCH_PASSWORD\" ]] \u0026\u0026 [[ -n \"$ELASTICSEARCH_USERNAME\" ]]; then\n  # *********** Creating Kibana index-patterns ***************\n  declare -a index_patterns=(\"logs-endpoint-*\" \"logs-*\" \"logs-endpoint-winevent-sysmon-*\" \"logs-endpoint-winevent-security-*\" \"logs-endpoint-winevent-system-*\" \"logs-endpoint-winevent-application-*\" \"logs-endpoint-winevent-wmiactivity-*\" \"logs-endpoint-winevent-powershell-*\" \"mitre-attack-*\" \"elastalert_status\" \"elastalert_status_status\" \"elastalert_status_error\" \"elastalert_status_silence\" \"elastalert_status_past\" \"sysmon-join-*\")\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Creating Kibana Index Patterns...\"\n  for index in ${!index_patterns[@]}; do\n      echo \"[++++++] creating kibana index ${index_patterns[${index}]}\"\n      until curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST \"$KIBANA_URL/api/saved_objects/index-pattern/${index_patterns[${index}]}\" \\\n      -H \"Content-Type: application/json\" -H \"kbn-xsrf: true\" \\\n      -d\"{\\\"attributes\\\":{\\\"title\\\":\\\"${index_patterns[${index}]}\\\",\\\"timeFieldName\\\":\\\"$TIME_FIELD\\\"}}\"\n      do\n        sleep 1\n      done\n  done\n\n  # *********** Making Sysmon the default index ***************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Making Sysmon the default index...\"\n  until curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST -H \"Content-Type: application/json\" -H \"kbn-xsrf: true\" \\\n  \"$KIBANA_URL/api/kibana/settings/defaultIndex\" \\\n  -d\"{\\\"value\\\":\\\"$DEFAULT_INDEX\\\"}\"\n  do\n    sleep 1\n  done\n\n  # *********** Set URL session store *********************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting URL session store\"\n  curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST \"$KIBANA_URL/api/kibana/settings\" -H 'Content-Type: application/json' -H 'kbn-xsrf: true' -d\"\n  {\n    \\\"changes\\\":{\n        \\\"state:storeInSessionStorage\\\": true\n      }\n  }\n  \"\n\n  # *********** Loading dashboards ***************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Loading Dashboards...\"\n  for file in ${DIR}/*.json\n  do\n      echo \"[++++++] Loading dashboard file ${file}\"\n      until curl -u $KIBANA_USER:$KIBANA_PASSWORD -X POST \"$KIBANA_URL/api/kibana/dashboards/import\" -H 'kbn-xsrf: true' \\\n      -H 'Content-type:application/json' -d @${file}\n      do\n        sleep 1\n      done\n  done\n\n  # *********** Creating HELK User *********************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting HELK's user password to $KIBANA_UI_PASSWORD\"\n  curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -X POST \"$ELASTICSEARCH_URL/_xpack/security/user/helk\" -H 'Content-Type: application/json' -d\"\n  {\n    \\\"password\\\" : \\\"$KIBANA_UI_PASSWORD\\\",\n    \\\"roles\\\" : [ \\\"superuser\\\" ],\n    \\\"full_name\\\" : \\\"The HELK\\\",\n    \\\"email\\\" : \\\"helk@example.com\\\"\n  }\n  \"\n\n  # *********** Create Roles *******************\n  curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -X POST \"$ELASTICSEARCH_URL/_xpack/security/role/hunters\" -H 'Content-Type: application/json' -d'\n  {\n    \"run_as\": [],\n    \"cluster\": [],\n    \"indices\": [\n      {\n        \"names\": [ \"logs-*\" ],\n        \"privileges\": [ \"read\" ]\n      }\n    ]\n  }\n  '\n  curl -u $ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD -X POST \"$ELASTICSEARCH_URL/_xpack/security/role/sysmon_hunters\" -H 'Content-Type: application/json' -d'\n  {\n    \"run_as\": [],\n    \"cluster\": [],\n    \"indices\": [\n      {\n        \"names\": [ \"logs-endpoint-winevent-sysmon-*\" ],\n        \"privileges\": [ \"read\" ]\n      }\n    ]\n  }\n  '\nelse\n  # *********** Creating Kibana index-patterns ***************\n  declare -a index_patterns=(\"logs-endpoint-*\" \"logs-*\" \"logs-endpoint-winevent-sysmon-*\" \"logs-endpoint-winevent-security-*\" \"logs-endpoint-winevent-system-*\" \"logs-endpoint-winevent-application-*\" \"logs-endpoint-winevent-wmiactivity-*\" \"logs-endpoint-winevent-powershell-*\" \"mitre-attack-*\" \"elastalert_status\" \"elastalert_status_status\" \"elastalert_status_error\" \"elastalert_status_silence\" \"elastalert_status_past\" \"sysmon-join-*\")\n\n  echo \"[+++] Creating Kibana Index Patterns...\"\n  for index in ${!index_patterns[@]}; do\n      echo \"[++++++] creating kibana index ${index_patterns[${index}]}\"\n      until curl -X POST \"$KIBANA_URL/api/saved_objects/index-pattern/${index_patterns[${index}]}\" \\\n      -H \"Content-Type: application/json\" -H \"kbn-xsrf: true\" \\\n      -d\"{\\\"attributes\\\":{\\\"title\\\":\\\"${index_patterns[${index}]}\\\",\\\"timeFieldName\\\":\\\"$TIME_FIELD\\\"}}\"\n      do\n          sleep 1\n      done\n  done\n\n  # *********** Set URL session store *********************\n  echo \"[HELK-KIBANA-DOCKER-INSTALLATION-INFO] Setting URL session store\"\n  curl -X POST \"$KIBANA_URL/api/kibana/settings\" -H 'Content-Type: application/json' -H 'kbn-xsrf: true' -d\"\n  {\n    \\\"changes\\\":{\n        \\\"state:storeInSessionStorage\\\": true\n      }\n  }\n  \"\n\n  # *********** Making Sysmon the default index ***************\n  echo \"[++] Making Sysmon the default index...\"\n  until curl -X POST -H \"Content-Type: application/json\" -H \"kbn-xsrf: true\" \\\n  \"$KIBANA_URL/api/kibana/settings/defaultIndex\" \\\n  -d\"{\\\"value\\\":\\\"$DEFAULT_INDEX\\\"}\"\n  do\n      sleep 1\n  done\n\n  # *********** Loading dashboards ***************\n  echo \"[+++] Loading Dashboards...\"\n  for file in ${DIR}/*.json\n  do\n      echo \"[++++++] Loading dashboard file ${file}\"\n      until curl -X POST \"$KIBANA_URL/api/kibana/dashboards/import\" -H 'kbn-xsrf: true' \\\n      -H 'Content-type:application/json' -d @${file}\n      do\n          sleep 1\n      done\n  done\nfi\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"kibana-entrypoint","namespace":"helk"}}
  creationTimestamp: null
  name: kibana-entrypoint
